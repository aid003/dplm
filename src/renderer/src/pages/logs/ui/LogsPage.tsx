import { useEffect, useRef } from 'react'
import { useLogs } from '../../../shared/hooks/useLogs'
import { LogEntry, MetricsPanel, LogFilters, TestGeneration, StatsChart } from '../../../shared/ui/logs'
import styles from './LogsPage.module.css'

export default function LogsPage(): React.JSX.Element {
  const {
    logs,
    metrics,
    filters,
    autoScroll,
    addLog,
    updateFilters,
    clearLogs,
    toggleAutoScroll,
    refreshMLStatus,
    runCompletionWithLogging
  } = useLogs()

  const logsContainerRef = useRef<HTMLDivElement>(null)

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–≥—É
  useEffect(() => {
    if (autoScroll && logsContainerRef.current) {
      logsContainerRef.current.scrollTop = logsContainerRef.current.scrollHeight
    }
  }, [logs, autoScroll])

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    addLog({
      level: 'info',
      source: 'system',
      message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
      category: 'init'
    })

    addLog({
      level: 'info',
      source: 'ml',
      message: 'ML —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
      data: { status: 'ready' }
    })
  }, [addLog])

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>–õ–æ–≥–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏</h1>
        <button
          onClick={refreshMLStatus}
          className={styles.refreshButton}
          title="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å ML"
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      <MetricsPanel metrics={metrics} />

      <StatsChart metrics={metrics} />

      <TestGeneration onRunCompletion={runCompletionWithLogging} />

      <LogFilters
        filters={filters}
        onFiltersChange={updateFilters}
        onClearLogs={clearLogs}
        onToggleAutoScroll={toggleAutoScroll}
        autoScroll={autoScroll}
      />

      <div className={styles.logsContainer} ref={logsContainerRef}>
        {logs.length === 0 ? (
          <div className={styles.emptyState}>
            <p>–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            <p className={styles.emptyHint}>
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å ML
            </p>
          </div>
        ) : (
          logs.map(entry => (
            <LogEntry key={entry.id} entry={entry} />
          ))
        )}
      </div>

      <div className={styles.footer}>
        <span className={styles.count}>
          –ü–æ–∫–∞–∑–∞–Ω–æ {logs.length} –ª–æ–≥–æ–≤
        </span>
        {autoScroll && (
          <span className={styles.autoScrollIndicator}>
            –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–∫–ª—é—á–µ–Ω
          </span>
        )}
      </div>
    </div>
  )
}

